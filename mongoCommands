to start the server
"C:\Program Files\MongoDB\Server\4.0\bin\mongod.exe" --dbpath="c:\data\db"

to start the client
"C:\Program Files\MongoDB\Server\4.0\bin\mongo.exe"

to connect to the database(if does not work with localhost try 127.0.0.1)
mongoose.connect("mongodb://localhost:27017/databaseName",{ useNewUrlParser: true }) 

const connection = mongoose.connection
connection.once("open", () =>{
    console.log("connection has been established")
})
to test on postMan
localhost:4000/signup

to make a db 
use dbName


Routing refers to how an application’s endpoints (URIs) respond to client requests
You define routing using methods of the Express app object that correspond to HTTP methods;
 for example, app.get() to handle GET requests and app.post to handle POST requests. 
 For a full list, see app.METHOD. You can also use app.all() to handle all HTTP methods and app.use()
  to specify middleware as the callback function (See Using middleware for details).

  These routing methods specify a callback function (sometimes called “handler functions”) called 
  when the application receives a request to the specified route (endpoint) and HTTP method. In other words,
   the application “listens” for requests that match the specified route(s) and method(s), 
   and when it detects a match, it calls the specified callback function.

In fact, the routing methods can have more than one callback function as arguments.
 With multiple callback functions, it is important to provide next as an argument to the 
 callback function and then call next() within the body of the function to hand off control to 
 the next callback.

